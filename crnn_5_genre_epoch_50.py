# -*- coding: utf-8 -*-
"""CRNN 5 Genre Epoch 50.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OMUzyAZdNiPlSB-Iet-RImd5rmxWk6bz
"""

from google.colab import drive

drive.mount('/content/gdrive', force_remount=True)

import os
import numpy as np

base_dir = '/content/gdrive/My Drive/CRNN/Lima Genre 50/'
!ls  "/content/gdrive/My Drive/CRNN/Lima Genre 50/"

train_dir = os.path.join(base_dir, 'Train')
validation_dir = os.path.join(base_dir, 'Test')

classic_dir = os.path.join(base_dir, 'Classic/')
folk_dir = os.path.join(base_dir, 'Folk/')
jazz_dir = os.path.join(base_dir, 'Jazz/')
pop_dir = os.path.join(base_dir, 'Pop/')
soul_dir = os.path.join(base_dir, 'Soul/')

print("Jumlah Data tiap Genre")
print('Jumlah Musik Classic : ', len(os.listdir(classic_dir)))
print('Jumlah Musik Folk : ', len(os.listdir(folk_dir)))
print('Jumlah Musik Jazz : ', len(os.listdir(jazz_dir)))
print('Jumlah Musik Pop : ', len(os.listdir(pop_dir)))
print('Jumlah Musik Soul : ', len(os.listdir(soul_dir)))

train_classic = os.path.join(train_dir, 'classic/')
train_folk = os.path.join(train_dir, 'folk/')
train_jazz = os.path.join(train_dir, 'jazz/')
train_pop = os.path.join(train_dir, 'pop/')
train_soul = os.path.join(train_dir, 'soul/')

validation_classic = os.path.join(validation_dir, 'classic/')
validation_folk = os.path.join(validation_dir, 'folk/')
validation_jazz = os.path.join(validation_dir, 'jazz/')
validation_pop = os.path.join(validation_dir, 'pop/')
validation_soul = os.path.join(validation_dir, 'soul/')

"""Dataset"""

import random
from shutil import copyfile

def train_val_split(source, train, val, train_ratio):
  total_size = len(os.listdir(source))
  train_size = int(train_ratio * total_size)
  val_size = total_size - train_size

  randomized = random.sample(os.listdir(source), total_size)
  train_files = randomized[0:train_size]
  val_files = randomized[train_size:total_size]

  for i in train_files:
    i_file = source + i
    destination = train + i
    copyfile(i_file, destination)

  for i in val_files:
    i_file = source +  i
    destination = val + i
    copyfile(i_file, destination)

#jumlah pembagian data training dan testing
train_ratio = 0.9

#pembagian training dan testing
#classic
source_00 = classic_dir
train_00 = train_classic
val_00 = validation_classic
train_val_split(source_00, train_00, val_00, train_ratio)

#pop
source_01 = pop_dir
train_01 = train_pop
val_01 = validation_pop
train_val_split(source_01, train_01, val_01, train_ratio)

#Jazz
source_02 = jazz_dir
train_02 = train_jazz
val_02 = validation_jazz
train_val_split(source_02, train_02, val_02, train_ratio)

#soul
source_03 = soul_dir
train_03 = train_soul
val_03 = validation_soul
train_val_split(source_03, train_03, val_03, train_ratio)

#folk
source_04 = folk_dir
train_04 = train_folk
val_04 = validation_folk
train_val_split(source_04, train_04, val_04, train_ratio)

print('Jumlah Seluruh Data per Genre  :', len(os.listdir(classic_dir)))
print('Jumlah Train Data per Genre 	:', len(os.listdir(train_classic)))
print('Jumlah Test Data pre Genre     :', len(os.listdir(validation_classic)))

"""Pre processing"""

import tensorflow as tf
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(
    rescale = 1./255,
    rotation_range = 20,
    horizontal_flip = True,
    shear_range = 0.3,
    fill_mode = 'nearest',
    width_shift_range = 0.2,
    height_shift_range = 0.2,
    zoom_range = 0.2
)

val_datagen = ImageDataGenerator(
    rescale = 1./255,
    rotation_range = 20,
    horizontal_flip = True,
    shear_range = 0.3,
    fill_mode = 'nearest',
    width_shift_range = 0.2,
    height_shift_range = 0.2,
    zoom_range = 0.2
)

train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size = (150, 150),
    batch_size = 5,
    class_mode = 'categorical'
)

val_generator = val_datagen.flow_from_directory(
    validation_dir,
    target_size = (150, 150),
    batch_size = 5,
    class_mode = 'categorical'
)

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs = {}):
   if(logs.get('accuracy') > 1):
    print('\nAkurasi mencapai 100%')
    self.model.stop_training = True

callbacks = myCallback()

"""

Model CNN - GRU"""

import keras
from keras.models import Sequential
from keras.layers import Convolution2D
from keras.layers import MaxPooling2D
from keras.layers import Flatten
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers import GRU
from keras.layers import Conv2D, Dense, MaxPooling1D, Flatten, MaxPool2D
import tensorflow as tf
from tensorflow.keras.layers import Dense,Flatten,Conv2D,MaxPooling2D,Dropout,GRU
from tensorflow.keras.models import Sequential

model = tf.keras.models.Sequential([
  tf.keras.layers.Conv2D(16, (3, 3), activation = 'relu', input_shape = (150, 150, 3)),
  tf.keras.layers.Lambda(lambda x: x[:,:,:,0], input_shape=(150, 150, 3)),
  tf.keras.layers.GRU(60, activation="tanh", return_sequences=True),
  tf.keras.layers.GRU(60, activation="tanh", return_sequences=False),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
  tf.keras.layers.Dense(5, activation = 'sigmoid')
  ])

model.summary()

model.compile(loss = 'categorical_crossentropy',
              optimizer = 'Adam', 
              metrics = ['accuracy'])

history = model.fit(
     train_generator,
     steps_per_epoch = 9, # 45 gambar = batch * steps
     epochs = 50,
     validation_data = val_generator,
     validation_steps = 1, # 5 gambar = batch * steps
     verbose = 1,
     callbacks = [callbacks]
)

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.image as mping
import matplotlib.pyplot as plt

scores_train = model.evaluate(train_generator,verbose=1)
scores_validation = model.evaluate(val_generator,verbose=1)
print("Train Accuracy: %.2f%%" % (scores_train[1]*100))
print("Validation Accuracy: %.2f%%" % (scores_validation[1]*100))

acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs = range(len(acc))

plt.plot(epochs, acc, 'r', label = 'Training Accuracy')
plt.plot(epochs, val_acc, 'b', label = 'Validation Accuracy')
plt.title('Training and Validation accuracy')
plt.legend(loc = 'best')
plt.show()

plt.plot(epochs, loss, 'r', label = 'Training Loss')
plt.plot(epochs, val_loss, 'b', label = 'Validation Loss')
plt.title('Training and Validation loss')
plt.legend(loc = 'best')
plt.show()

model_weight_file='/content/gdrive/My Drive/CRNN/Lima Genre 50/Train'
model.save(model_weight_file)

from sklearn.metrics import classification_report,accuracy_score
from keras.models import load_model
import math
import pandas as pd

val_size = 5
batch_size = 5

compute_steps_per_epoch = lambda x: int(math.ceil(1. * x / batch_size))
test_steps = compute_steps_per_epoch(val_size)


tl_img_aug_cnn = load_model(model_weight_file)
pred=tl_img_aug_cnn.predict(val_generator,
                            verbose=1,
                            steps=test_steps)

predicted_class_indices=np.argmax(pred,axis=1)
labels = (val_generator.class_indices)
labels = dict((v,k) for k,v in labels.items())
predictions = [labels[k] for k in predicted_class_indices]

filenames=val_generator.filenames
results=pd.DataFrame({"Filename":filenames,
                      "Predictions":predictions})

labels=['classic','pop','jazz','soul','folk']
test_labels = [fn.split('/')[0] for fn in filenames]

cr=classification_report(test_labels, predictions)
class_report=classification_report(test_labels, predictions,
                                   target_names=labels,
                                   output_dict=True)

print(cr)

"""Klasifikasi"""

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

"""Pop"""

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

"""Jazz"""

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

"""Soul"""

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

"""Folk"""

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])

import numpy as np
from keras.preprocessing import image
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():

  #predicting images
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  class_list = os.listdir(train_dir)

  images = np.vstack([x])
  classes = model.predict(images)
  index = np.argmax(classes[0],axis=0)
  print('prediction:', class_list[index])